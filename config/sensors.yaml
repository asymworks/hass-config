#### Sensor Definitions #######################################################

# Weather Prediction
- platform: darksky
  api_key: !secret darksky_api_key
  forecast:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
  monitored_conditions:
    - icon
    - summary
    - nearest_storm_distance
    - nearest_storm_bearing
    - humidity
    - temperature
    - temperature_high
    - temperature_low
    - apparent_temperature
    - apparent_temperature_high
    - apparent_temperature_low
    - wind_speed
    - wind_bearing
    - precip_type
    - precip_probability
    - precip_accumulation
    - precip_intensity
    - precip_intensity_max
    - uv_index
    - daily_summary
    - pressure
    - visibility
  scan_interval:
    minutes: 5

# Dark Sky Current Condition
- platform: template
  sensors:
    dark_sky_current_text:
      value_template: '{% if is_state("sensor.dark_sky_icon","clear-day") %} Clear 
                       {% elif is_state("sensor.dark_sky_icon","clear-night") %} Clear 
                       {% elif is_state("sensor.dark_sky_icon","rain") %} Rain
                       {% elif is_state("sensor.dark_sky_icon","snow") %} Snowy
                       {% elif is_state("sensor.dark_sky_icon","fog") %} Foggy
                       {% elif is_state("sensor.dark_sky_icon","sleet") %} Sleet
                       {% elif is_state("sensor.dark_sky_icon","wind") %} Windy
                       {% elif is_state("sensor.dark_sky_icon","cloudy") %} Cloudy
                       {% elif is_state("sensor.dark_sky_icon","partly-cloudy-day") %} Partly Cloudy
                       {% elif is_state("sensor.dark_sky_icon","partly-cloudy-night") %} Partly Cloudy
                       {% elif is_state("sensor.dark_sky_icon","hail") %} Hailing
                       {% elif is_state("sensor.dark_sky_icon","lightning") %} Lightning
                       {% elif is_state("sensor.dark_sky_icon","thunderstorm") %} Thunderstorm
                       {% endif %}'

# Bluetooth Presence (JPK Nexus 5X at Entryway)
- platform: mqtt
  name: monitor_entry_jp_n5x
  state_topic: !secret monitor_entry_jp_n5x_topic
  value_template: '{{ value_json.confidence }}'
  unit_of_measurement: '%'

- platform: mqtt
  name: rssi_entry_jp_n5x_raw
  state_topic: !secret rssi_entry_jp_n5x_topic
  unit_of_measurement: 'dBm'

- platform: filter
  name: rssi_entry_jp_n5x
  entity_id: sensor.rssi_entry_jp_n5x_raw
  filters:
    - filter: outlier
      window_size: 2
      radius: 1.0
    - filter: lowpass
      time_constant: 2
    - filter: time_simple_moving_average
      window_size: 00:01
      precision: 1
  
# Home Occupancy Confidence (JPK Nexus 5X)
- platform: min_max
  name: home_occupancy_confidence_jpk
  type: max
  round_digits: 0
  entity_ids:
    - sensor.monitor_entry_jp_n5x

# Presence Status
- platform: template
  sensors:
    jp_status:
      value_template: '{{ states.input_select.jp_presence_status.state }}'
      friendly_name_template: 'J.P. Presence Status'

# House State
- platform: template
  sensors:
    house_state:
      value_template: '{{ states.input_select.house_security.state }}'
      friendly_name_template: 'House State'

# Home Theater Player Status
- platform: template
  sensors:
    ht_player_state_state:
      value_template: '{{ states.input_select.ht_player_state.state }}'
      friendly_name_template: 'Home Theater Player Status'

# Home Theater Player Media
- platform: template
  sensors:
    ht_player_media_state:
      value_template: '{{ states.input_select.ht_player_media.state }}'
      friendly_name_template: 'Home Theater Media Type'

# ESP8266 Bed Sensors
- platform: mqtt
  state_topic: 'sensor/esp8266-bed-right'
  name: 'bed_right_value'

- platform: template
  sensors:
    jp_bed:
      friendly_name_template: "J.P. Bed"
      value_template: "{% if states('sensor.bed_right_value') | float > 300 %}Occupied{% else %}Empty{% endif %}"
      icon_template: "{% if states('sensor.bed_right_value') | float > 300 %}mdi:hotel{% else %}mdi:bed-empty{% endif %}"

# NUT UPS Sensors
- platform: nut
  name: Main Rack UPS 1
  host: nut-1.lan.kraussnet.com
  port: 3493
  alias: mainrack-ups-1
  username: !secret ups_username # dummy: ups_user
  password: !secret ups_password # dummy: ups_pass
  resources:
    - ups.load
    - ups.status.display
    - input.voltage
    - output.voltage
    - battery.runtime

# TP-Link Smart Plugs
#- platform: template
#  sensors:
#    tplink_media_center_amps:
#      friendly_name_template: "{{ states.switch.media_center.name }}"
#      value_template: '{{ states.switch.media_center.attributes["current_a"] | float }}'
#      unit_of_measurement: 'A'
#    tplink_media_center_watts:
#      friendly_name_template: "{{ states.switch.media_center.name }}"
#      value_template: '{{ states.switch.media_center.attributes["current_power_w"] | float }}'
#      unit_of_measurement: 'W'
#    tplink_media_center_volts:
#      friendly_name_template: "{{ states.switch.media_center.name }}"
#      value_template: '{{ states.switch.media_center.attributes["voltage"] | float }}'
#      unit_of_measurement: 'V'

#- platform: template
#  sensors:
#    tplink_server_rack_amps:
#      friendly_name_template: "{{ states.switch.tplink_server_rack.name }}"
#      value_template: '{{ states.switch.tplink_server_rack.attributes["current_a"] | float }}'
#      unit_of_measurement: 'A'
#    tplink_server_rack_volts:
#      friendly_name_template: "{{ states.switch.tplink_server_rack.name }}"
#      value_template: '{{ states.switch.tplink_server_rack.attributes["voltage"] | float }}'
#      unit_of_measurement: 'V'
#    tplink_server_rack_watts:
#      friendly_name_template: "{{ states.switch.tplink_server_rack.name }}"
#      value_template: '{{ states.switch.tplink_server_rack.attributes["current_power_w"] | float }}'
#      unit_of_measurement: 'W'
